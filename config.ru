require 'rubygems'
require 'bundler'

Bundler.require

require "./flovid"
require "./utah"
require "./washington"
require "./alaska"
require "./georgia"

if Flovid.development?
  require 'dotenv'
  Dotenv.load
else
  Bugsnag.configure do |config|
    config.api_key = ENV["BUGSNAG_API_KEY"]
  end

  use Bugsnag::Rack
end

app = Hanami::Router.new do
  get "/", to: ->(env) {
    [
      200, {"Content-Type" => "text/html"},
      StringIO.new(App.payload(env["QUERY_STRING"], Flovid))]
  }
  get "/utah", to: ->(env) {
    [
      200, {"Content-Type" => "text/html"},
      StringIO.new(App.payload(env["QUERY_STRING"], Utah))
    ]
  }
  get "/washington", to: ->(env) {
    [
      200, {"Content-Type" => "text/html"},
      StringIO.new(App.payload(env["QUERY_STRING"], Washington))
    ]
  }
  get "/alaska", to: ->(env) {
    [
      200, {"Content-Type" => "text/html"},
      StringIO.new(App.payload(env["QUERY_STRING"], Alaska))
    ]
  }
  get "/georgia", to: ->(env) {
    [
      200, {"Content-Type" => "text/html"},
      StringIO.new(App.payload(env["QUERY_STRING"], Georgia))
    ]
  }
end

run app

class App
  def self.pretty_datetime(time)
    format = "%A %B %e, %Y at %H:%M:%S %Z".freeze

    if time.respond_to? :strftime
      time.strftime(format)
    else
      Time.parse(time).strftime(format)
    end
  end

  def self.payload(query_string, class_name)
    report = class_name.covid_tracking_report(query_string)

    last_edit = pretty_datetime report[:last_edited_at]
    last_fetched = pretty_datetime report[:last_fetched_at]
    expires_at = pretty_datetime report[:expires_at]

    <<~HTML
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>#{class_name::STATE} COVID-19 Report</title>
      <style type="text/css">
        body {
          font-family: Tahoma, sans-serif;
        }
        th, td {
          padding: 0.3rem 1rem;
        }
        th {
          width: 50%;
        }

        td {
          width: 50%;
        }

        td:first-child, th:first-child {
          text-align: right;
        }

        td:last-child, th:last-child {
          text-align: left;
        }

        tr:nth-child(even) { background: #CCC }
        tr:nth-child(odd) { background: #FFF }
      </style>
    </head>
    <body>
      <nav>
        <ul>
          <li><a href="/alaska">Alaska</a></li>
          <li><a href="/">Florida</a></li>
          <li><a href="/georgia">Georgia</a></li>
          <li><a href="/utah">Utah</a></li>
          <li><a href="/washington">Washington</a></li>
        </ul>
      </nav>
      <h1>#{class_name::STATE} COVID-19 Report</h1>
      <p>
        This report is generated from the #{class_name::DEPARTMENT}'s COVID-19
        <a href="#{class_name&.testing_gallery_url || class_name.testing_feature_url}">
        ArcGIS feature layer</a>.
        <br />
        #{class_name::ACRONYM} maintains a <a href="#{class_name.dashboard_url}">dashboard</a> representation of this
        data which is created from the same source.
      </p>

      #{report_table(report[:data])}

      <p><code>*</code> denotes metrics tracked by the COVID Tracking Project</p>

      <footer>
        <p>
          Data last generated by #{class_name::ACRONYM} at <strong>#{last_edit}</strong>.<br />
          Last fetched from API at <strong>#{last_fetched}</strong>.<br />
          This data will remain cached until <strong>#{expires_at}</strong> so you don't need to
          refresh this page until then to get new data.
        </p>

        #{class_name.nomenclature if defined?(class_name.nomenclature)}

        <hr />
        <p><a href="https://github.com/olivierlacan/covid-19-fdoh-testing-data-parser/">Source code for this website</a></p>
      </footer>
    </body>
    </html>
    HTML
  end

  def self.report_table(data)
    rows = data.map do |_key, metric|
      <<~HTML
        <tr>
          <td title="#{metric[:source]}">#{metric[:name]}#{"*" if metric[:highlight]}</td>
          <td>#{metric[:value]}</td>
        </tr>
      HTML
    end.join("\n")

    output = <<~HTML
      <table>
        <tr>
          <th>Metric</th>
          <th>Value</th>
        </tr>
        #{rows}
      </table>
    HTML
  end
end
